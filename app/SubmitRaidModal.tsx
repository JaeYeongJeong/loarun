import React, { useEffect, useRef } from 'react';
import {
  StyleSheet,
  Modal,
  Text,
  View,
  Animated,
  TouchableOpacity,
  ScrollView,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { useCharacter } from '@/utils/CharacterContext';
import { RAID_LIST } from '@/utils/raidData';

type Difficulty = 'Ïã±Í∏Ä' | 'ÎÖ∏Îßê' | 'ÌïòÎìú';

type RaidStage = {
  stage: number; // Í¥ÄÎ¨∏ Î≤àÌò∏ (1, 2, 3...)
  gold: number; // Ìï¥Îãπ Í¥ÄÎ¨∏ÏóêÏÑú ÌöçÎìùÌïòÎäî Í≥®Îìú
  selected?: boolean; // ‚úÖ ÏÑ†ÌÉù Ïó¨Î∂Ä (true/false)
};

type Raiddifficulty = {
  difficulty: Difficulty;
  stages: RaidStage[]; // Í¥ÄÎ¨∏Î≥Ñ Ï†ïÎ≥¥
  totalGold: number;
  requiredItemLevel: number;
};

type Raid = {
  name: string;
  difficulty: Raiddifficulty[]; // ÎÇúÏù¥ÎèÑÎ≥Ñ Íµ¨ÏÑ±
};

type RaidModalProps = {
  isVisible: boolean;
  setIsVisibleFalse: () => void;
  id: string;
  index: number;
};

type SelectedStage = {
  raidName: string;
  difficulty: Difficulty;
  stage: number;
  gold: number;
};

const RaidModal: React.FC<RaidModalProps> = ({
  isVisible,
  setIsVisibleFalse,
  id,
  index,
}) => {
  const { characters, updateCharacter } = useCharacter();
  const character = characters.find((c) => c.id === id);
  const [selectedStages, setSelectedStages] = React.useState<SelectedStage[]>(
    []
  );

  if (!character) return null; // Ï∫êÎ¶≠ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Î™®Îã¨ÏùÑ Î†åÎçîÎßÅÌïòÏßÄ ÏïäÏùå

  const translateY = useRef(new Animated.Value(500)).current;

  useEffect(() => {
    if (isVisible) {
      Animated.timing(translateY, {
        toValue: 0,
        duration: 300,
        useNativeDriver: true,
      }).start();
    }
  }, [isVisible]);

  const isSelected = (
    raidName: string,
    difficulty: Difficulty,
    stage: number
  ) =>
    selectedStages.some(
      (s) =>
        s.raidName === raidName &&
        s.difficulty === difficulty &&
        s.stage === stage
    );

  const handleSelectStages = (
    raidName: string,
    difficulty: Difficulty,
    stage: number,
    gold: number
  ) => {
    setSelectedStages((prev) => {
      const isSelected = prev.some(
        (s) =>
          s.raidName === raidName &&
          s.stage === stage &&
          s.difficulty === difficulty
      );

      // Ïù¥ÎØ∏ ÏÑ†ÌÉùÎêú Í¥ÄÎ¨∏Ïù¥ÎùºÎ©¥ => Ìï¥Îãπ Í¥ÄÎ¨∏ Ïù¥ÌõÑ Îã®Í≥Ñ Ï†úÍ±∞
      if (isSelected) {
        return prev.filter(
          (s) => !(s.raidName === raidName && s.stage >= stage)
        );
      }

      const isSingle = difficulty === 'Ïã±Í∏Ä';
      const hasSingle = prev.length > 0 && prev[0].difficulty === 'Ïã±Í∏Ä';
      const hasOtherRaid = prev.length > 0 && prev[0].raidName !== raidName;

      // Ï¥àÍ∏∞Ìôî Ï°∞Í±¥
      if (isSingle || hasSingle || hasOtherRaid) {
        return Array.from({ length: stage }, (_, i) => ({
          raidName,
          difficulty,
          stage: i + 1,
          gold,
        }));
      }

      // Í∞ôÏùÄ Îã®Í≥ÑÍ∞Ä Ïù¥ÎØ∏ Îã§Î•∏ ÎÇúÏù¥ÎèÑÎ°ú ÏÑ†ÌÉùÎêú Í≤ΩÏö∞ Ï†úÍ±∞
      const filtered = prev.filter(
        (s) => !(s.raidName === raidName && s.stage === stage)
      );

      // Ïù¥Ï†Ñ + ÌòÑÏû¨ Îã®Í≥Ñ Ï∂îÍ∞Ä
      for (let i = 1; i <= stage; i++) {
        if (!filtered.some((s) => s.stage === i && s.raidName === raidName)) {
          filtered.push({ raidName, difficulty, stage: i, gold });
        }
      }
      console.log(selectedStages);
      return filtered.sort((a, b) => a.stage - b.stage); // stage ÏàúÏÑú Ïú†ÏßÄ
    });
  };

  const handleCloseModal = () => {
    setSelectedStages([]); // ÏÑ†ÌÉùÎêú Îã®Í≥Ñ Ï¥àÍ∏∞Ìôî

    Animated.timing(translateY, {
      toValue: 500,
      duration: 250,
      useNativeDriver: true,
    }).start(() => {
      setIsVisibleFalse();
    });
  };

  const handleSubmit = () => {
    if (typeof index !== 'number') {
      console.warn('Raid indexÍ∞Ä ÏóÜÏäµÎãàÎã§.');
      return;
    }

    const newSelectedRaids = [...(character.SelectedRaids || [])];

    if (selectedStages.length === 0) {
      // ÏÑ†ÌÉùÏù¥ ÏóÜÎäî Í≤ΩÏö∞ Îπà Î∞∞Ïó¥Î°ú Ï¥àÍ∏∞Ìôî
      newSelectedRaids[index] = {
        name: '', // Ïù¥Î¶ÑÎèÑ Ï¥àÍ∏∞ÌôîÌï†ÏßÄ Ïú†ÏßÄÌï†ÏßÄ ÏÑ†ÌÉù Í∞ÄÎä•
        stages: [],
        totalGold: 0,
      };
    } else {
      // ÏÑ†ÌÉùÏù¥ ÏûàÎäî Í≤ΩÏö∞ Ìï¥Îãπ Î†àÏù¥Îìú Îç∞Ïù¥ÌÑ∞Î°ú ÏÑ§Ï†ï
      newSelectedRaids[index] = {
        name: selectedStages[0].raidName,
        stages: selectedStages.map((s) => ({
          difficulty: s.difficulty,
          stage: s.stage,
          gold: s.gold,
          cleared: false,
        })),
        totalGold: selectedStages.reduce((total, s) => total + s.gold, 0),
      };
    }

    updateCharacter(character.id, {
      SelectedRaids: newSelectedRaids,
    });

    setSelectedStages([]);

    Animated.timing(translateY, {
      toValue: 500,
      duration: 250,
      useNativeDriver: true,
    }).start(() => {
      setIsVisibleFalse();
    });
  };

  return (
    <Modal
      animationType="none"
      transparent
      visible={isVisible}
      onRequestClose={handleCloseModal}
    >
      <View style={styles.overlay}>
        <KeyboardAvoidingView
          behavior={Platform.OS === 'ios' ? 'padding' : undefined}
          style={{ flex: 1, width: '100%' }}
        >
          <Animated.View
            style={[styles.container, { transform: [{ translateY }] }]}
          >
            <ScrollView>
              {RAID_LIST.map((raid, raidIdx) => (
                <View key={raidIdx} style={styles.raidBlock}>
                  <Text style={styles.raidName}>{raid.name}</Text>
                  {raid.difficulty.map((difficultyObj, stageIdx) => (
                    <View key={stageIdx} style={styles.difficultyBlock}>
                      {/* üîΩ Ìó§Îçî Ìïú Ï§Ñ Ï†ïÎ†¨ */}
                      <View style={styles.difficultyHeader}>
                        <Text style={styles.difficultyText}>
                          {difficultyObj.difficulty}
                        </Text>
                        <Text style={styles.totalGoldText}>
                          {difficultyObj.totalGold} G
                        </Text>
                      </View>

                      <View style={styles.stageContainer}>
                        {difficultyObj.stages.map((stage) => (
                          <TouchableOpacity
                            key={stage.stage}
                            style={[
                              styles.stageBox,
                              isSelected(
                                raid.name,
                                difficultyObj.difficulty,
                                stage.stage
                              ) && { backgroundColor: '#4CAF50' },
                            ]}
                            onPress={() => {
                              handleSelectStages(
                                raid.name,
                                difficultyObj.difficulty,
                                stage.stage,
                                stage.gold
                              );
                            }}
                          >
                            <Text
                              style={[
                                styles.stageLabelText,
                                isSelected(
                                  raid.name,
                                  difficultyObj.difficulty,
                                  stage.stage
                                ) && { color: 'white' },
                              ]}
                            >
                              {stage.stage}Í¥ÄÎ¨∏
                            </Text>
                            <Text
                              style={[
                                styles.stageGold,
                                isSelected(
                                  raid.name,
                                  difficultyObj.difficulty,
                                  stage.stage
                                ) && { color: 'white' },
                              ]}
                            >
                              {stage.gold}G
                            </Text>
                          </TouchableOpacity>
                        ))}
                      </View>
                    </View>
                  ))}
                </View>
              ))}
            </ScrollView>
            <View style={styles.buttonRow}>
              <TouchableOpacity
                onPress={handleCloseModal}
                style={styles.cancelButton}
              >
                <Text style={styles.cancelButtonText}>Îã´Í∏∞</Text>
              </TouchableOpacity>
              <TouchableOpacity
                onPress={handleSubmit}
                style={styles.confirmButton}
              >
                <Text style={styles.confirmButtonText}>ÌôïÏù∏</Text>
              </TouchableOpacity>
            </View>
          </Animated.View>
        </KeyboardAvoidingView>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    justifyContent: 'flex-end',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  container: {
    backgroundColor: '#f8f9fa', // ‚ú® ÌÜµÏùº
    padding: 16,
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    maxHeight: '90%',
  },
  raidBlock: {
    marginBottom: 24,
    backgroundColor: '#ffffff', // ‚ú® ÌÜµÏùº
    borderRadius: 10,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  raidName: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333', // ‚ú® ÌÜµÏùº
    marginBottom: 8,
  },
  stageContainer: {
    flexDirection: 'row',
    borderRadius: 8,
    backgroundColor: '#f1f3f5', // ‚ú® ÌÜµÏùº (section ÎÇ¥Î∂Ä Î∞ùÏùÄ ÌöåÏÉâ)
    alignItems: 'center',
    justifyContent: 'space-evenly',
    flexWrap: 'wrap',
  },
  stageBox: {
    flex: 1,
    padding: 4,
    alignItems: 'center',
    borderRadius: 8,
  },
  difficultyBlock: {
    backgroundColor: '#ffffff', // ‚ú® ÌÜµÏùº
    borderRadius: 8,
    padding: 12,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2,
  },
  difficultyHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  difficultyText: {
    fontSize: 16,
    color: '#333', // ‚ú® ÌÜµÏùº
    fontWeight: '600',
  },
  totalGoldText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#E67E22', // ‚ú® Í≥®ÎìúÎäî Ïò§Î†åÏßÄ
  },
  stageLabelText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#555', // ‚ú® ÌÜµÏùº
    marginBottom: 4,
  },
  stageGold: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#555', // ‚ú®
  },
  buttonRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 20,
  },
  cancelButton: {
    flex: 1,
    backgroundColor: '#e0e0e0', // ‚ú® ÌÜµÏùº
    paddingVertical: 12,
    marginRight: 8,
    borderRadius: 8,
    alignItems: 'center',
  },
  confirmButton: {
    flex: 1,
    backgroundColor: '#4CAF50', // ‚ú® ÌÜµÏùº
    paddingVertical: 12,
    marginLeft: 8,
    borderRadius: 8,
    alignItems: 'center',
  },
  cancelButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  confirmButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: 'white',
  },
});

export default RaidModal;
